#!/usr/bin/perl

$program = "../qdcontour";

%usednames = ();

# Shape filling

DoTest("shape filling",
       "shape_fill.conf",
       "shape_fill.png");

# Shape stroking

DoTest("shape stroking",
       "shape_stroke.conf",
       "shape_stroke.png");

# Shape marking

DoTest("shape marking",
       "shape_mark.conf",
       "shape_mark.png");

# Shape marking with alpha factor

DoTest("shape marking with alpha factor",
       "shape_mark_alpha_factor.conf",
       "shape_mark_alpha_factor.png");

# Combination of above tests

DoTest("shape rendering, all combined",
       "shape_combined.conf",
       "shape_combined.png");

# A trivial test

DoTest("trivial contour",
       "trivial.conf",
       "trivial_200210140900_140900.png");

# Test contourline

DoTest("contourline",
       "contourline.conf",
       "contourline_200210140900_140900.png");

# Test contourfill

DoTest("contourfill",
       "contourfill.conf",
       "contourfill_200210140900_140900.png");

# Test contourpattern

DoTest("contourpattern",
       "contourpattern.conf",
       "contourpattern_200210140900_140900.png");

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text) = shift(@_);
    my($conf) = shift(@_);
    my(@outputfiles) = @_;

    foreach $outputfile(@outputfiles)
    {
	if(exists($usednames{$outputfile}))
	{
	    print "Virhe regressiotesteissä: $outputfile käytössä useamman kerran\n";
	    exit(1);
	}
	$usednames{$outputfile} = 1;
    }

    # Ajetaan käsky

    $cmd = "$program -f conf/$conf";
    $output = `$cmd`;

    # Vertaa tuloksia

    print padname($text);

    $failed = 0;
    $extratext = "";
    foreach $outputfile(@outputfiles)
    {
	$expected = "results/$outputfile.ok";
	$actual = "results/$outputfile";

	if(equalimage($expected,$actual))
	{
	    unlink($actual);
	}
	else
	{
	    $failed++;
	    $extratext .= "(files $expected and $actual differ)\n";
	}
    }
    
    if($failed==0)
    {
	print "ok\n";
    }
    else
    {
	print "FAILED\n$extratext";
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two image files
# ----------------------------------------------------------------------

sub equalimage
{
    my($file1,$file2) = @_;

    # Files must exits

    if(!(-e $file1) || !(-e $file2))
    { return 0; }

    # Use the system imagecompare command

    $result = `imagecompare $file1 $file2`;
    chomp($result);

    return ($result eq "equal");
}

# ----------------------------------------------------------------------
